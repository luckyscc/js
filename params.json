{
  "name": "Js",
  "tagline": "js基础",
  "body": "### javascript的基础回顾\r\n\r\n#### in关键字\r\n\r\n* 最常用于的是在for in循环中,遍历对象的键\r\n\r\n* 判断属性是否存在于对象中\r\n\r\n* in关键字判断数组的时候是判断索引是否存在,而不是值.\r\n\r\n* indexOf返回值为第一个字母指定的数的索引,如果没有找到返回-1\r\n\r\n#### 值类型和引用类型\r\n\r\n* 值类型:string number boolean undefined,存储的就是数据本身的变量就是值类型的数据\r\n\r\n* 引用类型:引用类型赋值的时候,是将变量中存储的地址复制一份单独存储,但是两个变量共享一个对象.修改其中一个对象另外一个访问的时候也会访问到修改后的对象\r\n\r\n* 值类型做函数的参数:函数内部的变量,也就是形参和实参只是简单的赋值操作,两个数据是单独存储于内存中的,在函数内部修改不会影响到外部的变量\r\n\r\n* 引用类型做函数的参数:还是把实参存储的地址传给形参,在函数内部形参同样也指向该对象所以在函数内部对该对象修该,会影响到外面的变量\r\n\r\n* 如果在函数内部重新创建对象,为该形参赋值,那么两个对象不再有关系,修改其中一个,另外一个不受影响.\r\n\r\n####对像的动态特性\r\n\r\n* 对象刚创建出来为其添加新的属性和方法\r\n\r\n    ```js\r\n\r\n    var obj = {};\r\n\r\n    obj.name = 'zhangsan';\r\n\r\n    ```\r\n\r\n* 使用点语法赋值的时候,如果对象存在该属性,是修改属性,如果不存在该属性,是给对象新增属性并且赋值.如果使用的键不是字符串类型,会隐式的转化为字符串类型\r\n\r\n* 新增属性的方法有\r\n\r\n    * 点语法\r\n\r\n    * 通过[]的形式添加\r\n\r\n####逻辑中断\r\n\r\n* 表达式1||表达式2||表达式3||...:寻找真的表达式找到就返回,找不到返回最后一个\r\n\r\n* 表达式1&&表达式2&&表达式3&&...:寻找假的表达式找到就返回,找不到就返回最后一个\r\n\r\n* &&的优先级比||的高\r\n\r\n####delete关键字\r\n\r\n* delete关键字可以用来删除对象的属性,还有未使用var声明的变量\r\n\r\n* delete关键字有返回值,用来表示删除属性是否成功;如果删除的是不存在的属性,返回值为true,如果删除的属性存在于原型,返回值为true,但是并未删除.\r\n\r\n####函数的定义\r\n\r\n1.函数声明\r\n\r\n```js\r\n\r\nfunction funcName(){}\r\n\r\n```\r\n\r\n2.函数表达式\r\n\r\n```js\r\n\r\nvar funcName1 = function name(){\r\n\r\n    console.log('hello world');\r\n\r\n    }\r\n\r\n```\r\n\r\n3.Function\r\n\r\n```js\r\n\r\nvar funcName2 = new Function();\r\n\r\n```\r\n\r\n####异常处理\r\n\r\n* 异常最大的特征,一旦出现异常,后面的代码就将不再执行,这时候就需要异常处理了\r\n\r\n* 异常捕获语句(try catch)\r\n\r\n```js\r\n\r\ntry catch finally\r\n\r\na();\r\n\r\n```\r\n\r\n* 手动抛出异常\r\n\r\n```js\r\n\r\ntry {\r\n\r\n    a();\r\n\r\n    throw \"代码异常\";    \r\n\r\n}\r\n\r\n    catch(e) {\r\n\r\n    //出现异常后的处理代码\r\n\r\n    }\r\n\r\n```\r\n\r\n* 语法异常 try catch无法捕获\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}